"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import herc_acq.hercbottle_switch_t

class hercbottle_state_t(object):
    __slots__ = ["utime", "temperature", "humidity", "temperature_status", "humidity_status", "n_channels", "switch_channels"]

    def __init__(self):
        self.utime = 0
        self.temperature = 0.0
        self.humidity = 0.0
        self.temperature_status = 0
        self.humidity_status = 0
        self.n_channels = 0
        self.switch_channels = []

    def encode(self):
        buf = BytesIO()
        buf.write(hercbottle_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qffiii", self.utime, self.temperature, self.humidity, self.temperature_status, self.humidity_status, self.n_channels))
        for i0 in range(self.n_channels):
            assert self.switch_channels[i0]._get_packed_fingerprint() == herc_acq.hercbottle_switch_t._get_packed_fingerprint()
            self.switch_channels[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != hercbottle_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return hercbottle_state_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = hercbottle_state_t()
        self.utime, self.temperature, self.humidity, self.temperature_status, self.humidity_status, self.n_channels = struct.unpack(">qffiii", buf.read(28))
        self.switch_channels = []
        for i0 in range(self.n_channels):
            self.switch_channels.append(herc_acq.hercbottle_switch_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if hercbottle_state_t in parents: return 0
        newparents = parents + [hercbottle_state_t]
        tmphash = (0xca5efd60e058454f+ herc_acq.hercbottle_switch_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if hercbottle_state_t._packed_fingerprint is None:
            hercbottle_state_t._packed_fingerprint = struct.pack(">Q", hercbottle_state_t._get_hash_recursive([]))
        return hercbottle_state_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

