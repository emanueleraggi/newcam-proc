"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import herc_acq.attribute_t

class camera_t(object):
    __slots__ = ["utime", "camID", "triggerID", "surveyID", "outputPath", "n_attributes", "attributes", "state"]

    STATE_RUNNING = 0
    STATE_READY = 1
    STATE_WAITING_FOR_CAMERA = 2
    STATE_WAITING_FOR_SURVEY = 3

    def __init__(self):
        self.utime = 0
        self.camID = ""
        self.triggerID = ""
        self.surveyID = ""
        self.outputPath = ""
        self.n_attributes = 0
        self.attributes = []
        self.state = 0

    def encode(self):
        buf = BytesIO()
        buf.write(camera_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        __camID_encoded = self.camID.encode('utf-8')
        buf.write(struct.pack('>I', len(__camID_encoded)+1))
        buf.write(__camID_encoded)
        buf.write(b"\0")
        __triggerID_encoded = self.triggerID.encode('utf-8')
        buf.write(struct.pack('>I', len(__triggerID_encoded)+1))
        buf.write(__triggerID_encoded)
        buf.write(b"\0")
        __surveyID_encoded = self.surveyID.encode('utf-8')
        buf.write(struct.pack('>I', len(__surveyID_encoded)+1))
        buf.write(__surveyID_encoded)
        buf.write(b"\0")
        __outputPath_encoded = self.outputPath.encode('utf-8')
        buf.write(struct.pack('>I', len(__outputPath_encoded)+1))
        buf.write(__outputPath_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">i", self.n_attributes))
        for i0 in range(self.n_attributes):
            assert self.attributes[i0]._get_packed_fingerprint() == herc_acq.attribute_t._get_packed_fingerprint()
            self.attributes[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.state))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != camera_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return camera_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = camera_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        __camID_len = struct.unpack('>I', buf.read(4))[0]
        self.camID = buf.read(__camID_len)[:-1].decode('utf-8', 'replace')
        __triggerID_len = struct.unpack('>I', buf.read(4))[0]
        self.triggerID = buf.read(__triggerID_len)[:-1].decode('utf-8', 'replace')
        __surveyID_len = struct.unpack('>I', buf.read(4))[0]
        self.surveyID = buf.read(__surveyID_len)[:-1].decode('utf-8', 'replace')
        __outputPath_len = struct.unpack('>I', buf.read(4))[0]
        self.outputPath = buf.read(__outputPath_len)[:-1].decode('utf-8', 'replace')
        self.n_attributes = struct.unpack(">i", buf.read(4))[0]
        self.attributes = []
        for i0 in range(self.n_attributes):
            self.attributes.append(herc_acq.attribute_t._decode_one(buf))
        self.state = struct.unpack(">i", buf.read(4))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if camera_t in parents: return 0
        newparents = parents + [camera_t]
        tmphash = (0x73e84fb02b4efda0+ herc_acq.attribute_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if camera_t._packed_fingerprint is None:
            camera_t._packed_fingerprint = struct.pack(">Q", camera_t._get_hash_recursive([]))
        return camera_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

