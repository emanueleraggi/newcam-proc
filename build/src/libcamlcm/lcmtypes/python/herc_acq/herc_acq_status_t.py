"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class herc_acq_status_t(object):
    __slots__ = ["utime", "status", "key", "label", "display", "message", "alertOnWarning", "alertOnError", "errorOnExpire", "ttl_seconds", "importance"]

    STATUS_OK = 0
    STATUS_ALERT = 1
    STATUS_WARN = 2
    STATUS_ERROR = 3

    def __init__(self):
        self.utime = 0
        self.status = 0
        self.key = ""
        self.label = ""
        self.display = ""
        self.message = ""
        self.alertOnWarning = False
        self.alertOnError = False
        self.errorOnExpire = False
        self.ttl_seconds = 0.0
        self.importance = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(herc_acq_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.utime, self.status))
        __key_encoded = self.key.encode('utf-8')
        buf.write(struct.pack('>I', len(__key_encoded)+1))
        buf.write(__key_encoded)
        buf.write(b"\0")
        __label_encoded = self.label.encode('utf-8')
        buf.write(struct.pack('>I', len(__label_encoded)+1))
        buf.write(__label_encoded)
        buf.write(b"\0")
        __display_encoded = self.display.encode('utf-8')
        buf.write(struct.pack('>I', len(__display_encoded)+1))
        buf.write(__display_encoded)
        buf.write(b"\0")
        __message_encoded = self.message.encode('utf-8')
        buf.write(struct.pack('>I', len(__message_encoded)+1))
        buf.write(__message_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">bbbfd", self.alertOnWarning, self.alertOnError, self.errorOnExpire, self.ttl_seconds, self.importance))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != herc_acq_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return herc_acq_status_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = herc_acq_status_t()
        self.utime, self.status = struct.unpack(">qi", buf.read(12))
        __key_len = struct.unpack('>I', buf.read(4))[0]
        self.key = buf.read(__key_len)[:-1].decode('utf-8', 'replace')
        __label_len = struct.unpack('>I', buf.read(4))[0]
        self.label = buf.read(__label_len)[:-1].decode('utf-8', 'replace')
        __display_len = struct.unpack('>I', buf.read(4))[0]
        self.display = buf.read(__display_len)[:-1].decode('utf-8', 'replace')
        __message_len = struct.unpack('>I', buf.read(4))[0]
        self.message = buf.read(__message_len)[:-1].decode('utf-8', 'replace')
        self.alertOnWarning = bool(struct.unpack('b', buf.read(1))[0])
        self.alertOnError = bool(struct.unpack('b', buf.read(1))[0])
        self.errorOnExpire = bool(struct.unpack('b', buf.read(1))[0])
        self.ttl_seconds, self.importance = struct.unpack(">fd", buf.read(12))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if herc_acq_status_t in parents: return 0
        tmphash = (0x354f682c6d1362f2) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if herc_acq_status_t._packed_fingerprint is None:
            herc_acq_status_t._packed_fingerprint = struct.pack(">Q", herc_acq_status_t._get_hash_recursive([]))
        return herc_acq_status_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

