/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package herc_acq;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class timing_command_t implements lcm.lcm.LCMEncodable
{
    public String command;
    public int num_args;
    public String args[];
 
    public timing_command_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x1d0549bdc71fe92bL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(herc_acq.timing_command_t.class))
            return 0L;
 
        classes.add(herc_acq.timing_command_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        __strbuf = new char[this.command.length()]; this.command.getChars(0, this.command.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeInt(this.num_args); 
 
        for (int a = 0; a < this.num_args; a++) {
            __strbuf = new char[this.args[a].length()]; this.args[a].getChars(0, this.args[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
    }
 
    public timing_command_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public timing_command_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static herc_acq.timing_command_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        herc_acq.timing_command_t o = new herc_acq.timing_command_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.command = new String(__strbuf);
 
        this.num_args = ins.readInt();
 
        this.args = new String[(int) num_args];
        for (int a = 0; a < this.num_args; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.args[a] = new String(__strbuf);
        }
 
    }
 
    public herc_acq.timing_command_t copy()
    {
        herc_acq.timing_command_t outobj = new herc_acq.timing_command_t();
        outobj.command = this.command;
 
        outobj.num_args = this.num_args;
 
        outobj.args = new String[(int) num_args];
        if (this.num_args > 0)
            System.arraycopy(this.args, 0, outobj.args, 0, this.num_args); 
        return outobj;
    }
 
}

