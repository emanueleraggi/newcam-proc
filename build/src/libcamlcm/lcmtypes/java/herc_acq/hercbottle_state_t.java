/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package herc_acq;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class hercbottle_state_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public float temperature;
    public float humidity;
    public int temperature_status;
    public int humidity_status;
    public int n_channels;
    public herc_acq.hercbottle_switch_t switch_channels[];
 
    public hercbottle_state_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xca5efd60e058454fL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(herc_acq.hercbottle_state_t.class))
            return 0L;
 
        classes.add(herc_acq.hercbottle_state_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + herc_acq.hercbottle_switch_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeFloat(this.temperature); 
 
        outs.writeFloat(this.humidity); 
 
        outs.writeInt(this.temperature_status); 
 
        outs.writeInt(this.humidity_status); 
 
        outs.writeInt(this.n_channels); 
 
        for (int a = 0; a < this.n_channels; a++) {
            this.switch_channels[a]._encodeRecursive(outs); 
        }
 
    }
 
    public hercbottle_state_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public hercbottle_state_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static herc_acq.hercbottle_state_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        herc_acq.hercbottle_state_t o = new herc_acq.hercbottle_state_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.temperature = ins.readFloat();
 
        this.humidity = ins.readFloat();
 
        this.temperature_status = ins.readInt();
 
        this.humidity_status = ins.readInt();
 
        this.n_channels = ins.readInt();
 
        this.switch_channels = new herc_acq.hercbottle_switch_t[(int) n_channels];
        for (int a = 0; a < this.n_channels; a++) {
            this.switch_channels[a] = herc_acq.hercbottle_switch_t._decodeRecursiveFactory(ins);
        }
 
    }
 
    public herc_acq.hercbottle_state_t copy()
    {
        herc_acq.hercbottle_state_t outobj = new herc_acq.hercbottle_state_t();
        outobj.utime = this.utime;
 
        outobj.temperature = this.temperature;
 
        outobj.humidity = this.humidity;
 
        outobj.temperature_status = this.temperature_status;
 
        outobj.humidity_status = this.humidity_status;
 
        outobj.n_channels = this.n_channels;
 
        outobj.switch_channels = new herc_acq.hercbottle_switch_t[(int) n_channels];
        for (int a = 0; a < this.n_channels; a++) {
            outobj.switch_channels[a] = this.switch_channels[a].copy();
        }
 
        return outobj;
    }
 
}

